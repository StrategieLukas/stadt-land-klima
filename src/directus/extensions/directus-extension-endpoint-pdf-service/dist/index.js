import e from"path";import{execFile as t}from"child_process";import"fs";var s={id:"pdf-service",handler:async(s,{services:i,getSchema:n})=>{const{ItemsService:r}=i;s.get("/",(e,t)=>t.send("Hello, World!")),s.post("/municipality/:slug",async(s,i)=>{const a=s.accountability,o=await n(),c=s.params.slug;if(!c)return i.status(400).send("Missing municipality slug in path");try{const s=new r("municipalities",{schema:o,accountability:a}),n=await s.readByQuery({filter:{slug:{_eq:c}},limit:1});if(!n||!n[0])return i.status(404).send(`Municipality "${c}" not found or access denied`);const u=n[0],d=new r("measures",{schema:o,accountability:a}),p=await d.readByQuery({});if(!p)return i.status(404).send("Measures not found or access denied");const l=new r("ratings_measures",{schema:o,accountability:a}),f=await l.readByQuery({filter:{localteam_id:{_eq:u.localteam_id}}});if(!f)return i.status(404).send("Rating measures not found or access denied");const m=function(e,t){if(!Array.isArray(e)||!Array.isArray(t))return{};const s=new Map(t.map(e=>[e.id,e])),i={};for(const t of e){const e=s.get(t.measure_id);if(e){const{sector:s}=e;t.measure=e,i[s]=i[s]||[],i[s].push(t)}}return i}(f,p),y=e.join(process.cwd(),"/extensions/directus-extension-endpoint-pdf-service/typst"),g=e.join(y,"municipality_summary.typ"),h=["compile","--input",`municipality=${JSON.stringify(u)}`,"--input",`measures=${JSON.stringify(m)}`,"--font-path",`${y}/fonts`,g,"-"];t("typst",h,{maxBuffer:52428800,encoding:"buffer"},(e,t,s)=>{if(e)return console.error("Typst error:",e),i.status(500).send("PDF generation failed");s&&s.length&&console.warn("Typst warnings:",s.toString()),i.setHeader("Content-Type","application/pdf"),i.setHeader("Content-Disposition",'inline; filename="output.pdf"'),i.status(200).send(t)})}catch(e){return console.error("Error fetching municipality:",e),i.status(500).send("Server error")}})}};export{s as default};
