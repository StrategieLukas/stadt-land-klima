"use strict";console.log("Extension loaded");var e=Object.freeze({__proto__:null,calculateScores:async function({municipalityIds:e=null,catalogVersionId:a},{services:t,getSchema:i,logger:c}){const s=await i(),r=new t.ItemsService("ratings_measures",{schema:s,accountability:{admin:!0}}),n=new t.ItemsService("municipality_scores",{schema:s,accountability:{admin:!0}});c.info("[calculateScores] Start recalculation");const o=new t.ItemsService("measures",{schema:s,accountability:{admin:!0}}),l=await o.readByQuery({limit:-1,filter:{catalog_version:{_eq:a}},fields:["id","category"]}),u=l?.data?.map(e=>e.id)??[];if(!u.length)return void c.info(`[calculateScores] No measures found for catalog_version=${a}`);c.info(`[calculateScores] Found ${u.length} measures`);const m={measure_id:{_in:u}};e?.length&&(m["localteam_id.municipality_id"]={_in:e.flat()}),c.info("Filter for ratings_measures:",m);const d=await r.readByQuery({limit:-1,filter:m,fields:["rating",{measure_id:["category"]},{localteam_id:["municipality_id"]}]}),g=d?.data??[];if(c.info(`[calculateScores] Loaded ${g.length} ratings`),!g.length)return;const y={};for(const e of g){const a=e.localteam_id?.municipality_id;if(a&&(y[a]||(y[a]={municipality:a,total:0,count:0,categories:{agriculture:[],buildings:[],management:[],energy:[],industry:[],transport:[]}}),null!=e.rating)){y[a].total+=e.rating,y[a].count++;const t=e.measure_id?.category;t&&y[a].categories[t]&&y[a].categories[t].push(e.rating)}}c.info("[calculateScores] Aggregation complete");for(const e of Object.keys(y)){const t=y[e],i=t.count?t.total/t.count:0,s={};for(const[e,a]of Object.entries(t.categories))s[`score_${e}`]=a.length?a.reduce((e,a)=>e+a,0)/a.length:0;const r={score_total:i,percentage_rated:t.count?Math.round(t.count/g.length*100):0,...s},o=await n.readByQuery({limit:1,filter:{municipality:{_eq:e},catalog_version:{_eq:a}}}),l=o?.data??[];l.length?(await n.updateOne(l[0].id,r),c.info(`[calculateScores] Updated municipality_scores for mun=${e}`)):c.warn(`[calculateScores] No municipality_scores found for mun=${e}, catalog_version=${a}`)}c.info(`[calculateScores] Recalculated scores for ${Object.keys(y).length} municipalities (catalog_version=${a})`)}});module.exports=({action:a,filter:t},{services:i,database:c,getSchema:s,logger:r})=>{const n={admin:!0},o=async(a,t)=>{const{calculateScores:i}=await Promise.resolve().then(function(){return e});return await i(a,t)},l=async(e,a)=>{const t=await s(),c=new i.ItemsService("municipalities",{schema:t,accountability:n}),r=await c.readOne(e.key);r&&(await(async(e,{services:a,getSchema:t,logger:i})=>{const c=await t(),s=new a.ItemsService("measure_catalog",{schema:c,accountability:n}),r=new a.ItemsService("municipality_scores",{schema:c,accountability:n}),o=new a.ItemsService("municipalities",{schema:c,accountability:n}),l=(await s.readByQuery({limit:-1})).map(a=>({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0})),u=await r.createMany(l);await o.updateOne(e.id,{scores:u}),i.info(`[createEmptyScores] Created ${u.length} municipality_scores for ${e.name}`)})(r,a),await(async(e,{services:a,getSchema:t,logger:i})=>{const c=await t(),s=new a.ItemsService("measures",{schema:c,accountability:n}),r=new a.ItemsService("ratings_measures",{schema:c,accountability:n}),o=await s.readByQuery({limit:-1,filter:{status:{_eq:"published"}}});if(!o?.length)return void i.info(`[createEmptyRatings] No published measures found for new municipality ${e.name}`);const l=o.map(a=>({measure_id:a.id,catalog_version:"object"==typeof a.catalog_version?a.catalog_version.id:a.catalog_version,localteam_id:e.localteam_id,status:"draft",approved:!1,choices:a.choices_rating,rating:null}));await r.createMany(l,{emitEvents:!1}),i.info(`[createEmptyRatings] Created ${l.length} ratings_measures silently for municipality=${e.name}`)})(r,a))},u=async(e,a)=>{const t=await s(),c=new i.ItemsService("measures",{schema:t,accountability:n}),r=Array.isArray(e.keys)?e.keys[0]:e.keys,l=await c.readOne(r);if(!l||"published"!==l.status)return;await(async(e,{services:a,getSchema:t,logger:i})=>{const c=await t(),s=new a.ItemsService("municipalities",{schema:c,accountability:n}),r=new a.ItemsService("ratings_measures",{schema:c,accountability:n}),o=await s.readByQuery({limit:-1});if(!o?.length)return;const l=o.map(a=>({measure_id:e.id,catalog_version:"object"==typeof e.catalog_version?e.catalog_version.id:e.catalog_version,localteam_id:a.localteam_id,status:"draft",approved:!1,rating:null}));await r.createMany(l),i.info(`[createEmptyRatingsForMeasure] Created ${l.length} ratings for measure=${e.id}`)})(l,a);const u="object"==typeof l.catalog_version?l.catalog_version.id:l.catalog_version;await o({catalogVersionId:u},a)},m=async(e,a)=>{const t=await s(),c=new i.ItemsService("ratings_measures",{schema:t,accountability:n}),r=e.key??e.keys[0],l=await c.readOne(r,{fields:["localteam_id.municipality_id","measure_id.catalog_version"]}),u=l.localteam_id?.municipality_id,m="object"==typeof l.measure_id.catalog_version?l.measure_id.catalog_version.id:l.measure_id.catalog_version;u&&m&&(await o({municipalityIds:[u],catalogVersionId:m},a),await(async({catalogVersionId:e},{services:a,getSchema:t,logger:i})=>{const c=await t(),s=new a.ItemsService("municipality_scores",{schema:c,accountability:{admin:!0}}),r=await s.readByQuery({limit:-1,filter:{catalog_version:{_eq:e},municipality:{status:{_eq:"published"}}},fields:["id","score_total"]});if(!r?.length)return i.info(`[updateRanks] No scores found for catalogVersion=${e}`);const n=r.sort((e,a)=>(a.score_total??0)-(e.score_total??0)).map((e,a,t)=>({id:e.id,rank:0===a||e.score_total!==t[a-1].score_total?a+1:t[a-1].rank}));for(const e of n)await s.updateOne(e.id,{rank:e.rank});i.info(`[updateRanks] Updated ranks for ${n.length} municipality_scores`)})({catalogVersionId:m},a))},d=(e,a)=>async(t,n)=>{try{r.info(`[HOOK] entering ${e} â€” collection=${t.collection} key=${t.key} keys=${t.keys}`),r.info(`[HOOK] ctx keys: ${Object.keys(n||{}).join(", ")}`),r.info(`[HOOK] services available: ${Object.keys(i||{}).slice(0,20).join(", ")}`),t&&t.collection||r.warn(`[HOOK:${e}] meta missing or malformed: ${JSON.stringify(t)}`),await a(t,{services:i,getSchema:s,database:c,logger:r})}catch(a){throw r.error(`[HOOK:${e}] Caught error: ${a?.message}`),r.error(a?.stack??a),a}};a("items.create",d("items.create",async(e,a)=>{switch(e.collection){case"municipalities":return await l(e,a);case"measures":return await u(e,a);case"ratings_measures":return await m(e,a);default:return}})),a("items.update",d("items.update",async(e,a)=>{switch(e.collection){case"measures":return await u(e,a);case"ratings_measures":return await m(e,a);default:return}}))};
