"use strict";console.log("Extension read");module.exports=({action:e,filter:a},{services:t,database:i,getSchema:n,logger:r})=>{console.log("Entering hook consolelog"),r.info("Entering hook loggerinfo");const s={admin:!0},o=async()=>{const e="\n      BEGIN;\n      SELECT FROM public.municipalities ORDER BY id FOR UPDATE;\n      WITH RankedScores AS (\n        SELECT id, DENSE_RANK() OVER (ORDER BY score_total DESC) AS place\n        FROM public.municipalities\n        WHERE status='published'\n      )\n      UPDATE public.municipalities AS m\n      SET place = CASE WHEN m.status='published'\n        THEN (SELECT r.place FROM RankedScores r WHERE r.id=m.id)\n        ELSE -1\n      END;\n      COMMIT;\n    ";r.info(e);const a=await i.raw(e);r.warn(a)},c=async({keys:e=null,measureIds:a=null}={})=>{const i=await n(),o=new t.ItemsService("ratings_measures",{schema:i,accountability:s}),c=new t.ItemsService("measures",{schema:i,accountability:s}),l=new t.ItemsService("municipalities",{schema:i,accountability:s}),u=await c.readByQuery({limit:-1,filter:{status:{_eq:"published"},catalog_version:{isCurrentBackend:{_eq:!0}}}}),d=u?.data??u??[];r.info(`[CalcScores] Loaded ${d.length} measures`);let m=[];m=e&&e.length?(await o.readMany(e,{limit:-1})).data??[]:(await o.readByQuery({limit:-1})).data??[];const y=[...new Set(m.map(e=>e.localteam_id).filter(Boolean))];if(!y.length)return;const f=(await l.readByQuery({filter:{localteam_id:{_in:y}},limit:-1})).data??[];r.info(`[CalcScores] Processing ${f.length} municipalities`);for(const e of f){const a={total:{numerator:0,denominator:0},numberOfRated:{numerator:0,denominator:0}};d.forEach(e=>{a[e.sector]={numerator:0,denominator:0}});m.filter(a=>a.localteam_id===e.localteam_id).forEach(e=>{const t=d.find(a=>a.id===e.measure_id);if(!t)return;const i=t.sector,n=t.weight??0;a.total.denominator+=n,a.numberOfRated.denominator+=n,a[i].denominator+=n,e.approved&&"published"===e.status&&(a.total.numerator+=e.rating*n,a.numberOfRated.numerator+=n,a[i].numerator+=e.rating*n)});const t={};for(const e in a){const{numerator:i,denominator:n}=a[e];t["numberOfRated"===e?"percentage_rated":"score_"+e]=n>0?i/n*100:0}await l.updateOne(e.id,t),r.info(`[CalcScores] Municipality ${e.id} updated: ${JSON.stringify(t)}`)}};r.info("Registering actions/hooks"),e("items.create",async(e,a)=>{"ratings_measures"===e.collection&&(r.info("[Hook] ratings_measures.create triggered"),await c({keys:e.keys}),await o())}),e("items.update",async(e,a)=>{"ratings_measures"===e.collection&&(r.info("[Hook] ratings_measures.update triggered"),await c({keys:e.keys}),await o())}),e("items.update",async(e,a)=>{if("municipalities"!==e.collection)return;if(!e.payload||"published"!==e.payload.status)return;r.info("[Hook] municipalities.update triggered for published status");const i=await n(),l=new t.ItemsService("ratings_measures",{schema:i,accountability:s}),u=new t.ItemsService("municipalities",{schema:i,accountability:s}),d=Array.isArray(e.keys)?e.keys[0]:e.keys,m=await u.readOne(d);if(!m)return;const y=await l.readByQuery({filter:{localteam_id:{_eq:m.localteam_id}},limit:-1}),f=(y?.data??[]).map(e=>e.id);f.length?await c({keys:f}):await c({}),await o()}),a("items.delete",async(e,a)=>{if("measures"!==e.collection)return;const i=await n(),r=new t.ItemsService("ratings_measures",{schema:i,accountability:s});for(const a of e.keys){const e=await r.readByQuery({filter:{measure_id:{_eq:a},status:{_eq:"published"}},limit:1});if((e?.data??[]).length){const e=new Error(`Cannot delete measure ${a}: published ratings exist.`);throw e.code="FORBIDDEN",e}await r.deleteByQuery({filter:{measure_id:{_eq:a}}})}return e})};
