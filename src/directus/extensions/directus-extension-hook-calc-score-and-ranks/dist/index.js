"use strict";console.log("Extension loaded");var e=Object.freeze({__proto__:null,calculateScores:async function({municipalityIds:e=null,catalogVersionId:a},{services:t,getSchema:i,logger:s}){try{s.info("[calculateScores] start");const r=await i(),n=new t.ItemsService("ratings_measures",{schema:r,accountability:{admin:!0}}),c=new t.ItemsService("municipality_scores",{schema:r,accountability:{admin:!0}}),o=new t.ItemsService("municipalities",{schema:r,accountability:{admin:!0}}),l=new t.ItemsService("measures",{schema:r,accountability:{admin:!0}});s.info("test1: params",{municipalityIds:e,catalogVersionId:a}),s.info("test2: fetching measures for catalogVersionId");const u=await l.readByQuery({limit:-1,filter:{catalog_version:{_eq:a}},fields:["id","category"]});if(s.info("test2a: measures response length",Array.isArray(u)?u.length:0),!u||!u.length)return void s.info(`[calculateScores] No measures found for catalog_version=${a}`);const m=u.map(e=>e.id);s.info("test2b: measureIds count",m.length);let d=[];if(e&&e.length){s.info("test3: fetching municipalities to resolve localteam_ids",e);const a=await o.readByQuery({limit:-1,filter:{id:{_in:e.flat()}},fields:["id","localteam_id"]});if(s.info("test3a: municipalities fetched",{count:Array.isArray(a)?a.length:0}),d=(a||[]).map(e=>e.localteam_id).filter(Boolean),s.info("test3b: resolved localteamIds",d),!d.length)return void s.info("[calculateScores] No localteam_ids resolved from municipalityIds — nothing to do")}const g={measure_id:{_in:m}};d.length&&(g.localteam_id={_in:d}),s.info("test4: ratingsFilter",g),s.info("test5: fetching ratings");const y=await n.readByQuery({limit:-1,filter:g,fields:["rating","measure_id.category","localteam_id.municipality_id"]});if(s.info("test5a: ratings fetched count",Array.isArray(y)?y.length:0),!y||!y.length)return void s.info(`[calculateScores] No ratings found for catalogVersionId=${a}`);s.info("test6: aggregating ratings");const f={};for(const e of y){const a=e?.localteam_id?.municipality_id;if(a&&(f[a]||(f[a]={municipality:a,total:0,count:0,categories:{agriculture:[],buildings:[],management:[],energy:[],industry:[],transport:[]}}),null!=e.rating)){f[a].total+=e.rating,f[a].count+=1;const t=e?.measure_id?.category;t&&Object.prototype.hasOwnProperty.call(f[a].categories,t)&&f[a].categories[t].push(e.rating)}}s.info("test7: aggregation complete",{municipalities:Object.keys(f).length});const _=Object.keys(f);s.info("test8: preparing updates",{groupedCount:_.length});for(const e of _){const t=f[e],i=t.count?t.total/t.count:0,r={};for(const[e,a]of Object.entries(t.categories))r[`score_${e}`]=a.length?a.reduce((e,a)=>e+a,0)/a.length:0;const n={score_total:i,percentage_rated:t.count?Math.round(t.count/y.length*100):0,...r},o=await c.readByQuery({limit:1,filter:{municipality:{_eq:e},catalog_version:{_eq:a}},fields:["id"]})||[];if(o.length){const a=o[0].id;s.info("test9: updating municipality_scores",{munId:e,id:a,updatePayload:n}),await c.updateOne(a,n)}else s.warn("test9: municipality_scores missing, skipping update",{munId:e,catalogVersionId:a})}return void s.info(`[calculateScores] done — recalculated ${Object.keys(f).length} municipalities (catalog_version=${a})`)}catch(e){throw s.error("[calculateScores] error",e?.message??String(e)),s.error(e?.stack??e),e}}});module.exports=({action:a,filter:t},{services:i,database:s,getSchema:r,logger:n})=>{const c={admin:!0},o=async(a,t)=>{const{calculateScores:i}=await Promise.resolve().then(function(){return e});return await i(a,t)},l=async(e,a)=>{const t=await r(),s=new i.ItemsService("municipalities",{schema:t,accountability:c}),n=await s.readOne(e.key);n&&(await(async(e,{services:a,getSchema:t,logger:i})=>{const s=await t(),r=new a.ItemsService("measure_catalog",{schema:s,accountability:c}),n=new a.ItemsService("municipality_scores",{schema:s,accountability:c}),o=new a.ItemsService("municipalities",{schema:s,accountability:c}),l=(await r.readByQuery({limit:-1})).map(a=>({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0})),u=await n.createMany(l);await o.updateOne(e.id,{scores:u}),i.info(`[createEmptyScores] Created ${u.length} municipality_scores for ${e.name}`)})(n,a),await(async(e,{services:a,getSchema:t,logger:i})=>{const s=await t(),r=new a.ItemsService("measures",{schema:s,accountability:c}),n=new a.ItemsService("ratings_measures",{schema:s,accountability:c}),o=await r.readByQuery({limit:-1,filter:{status:{_eq:"published"}}});if(!o?.length)return void i.info(`[createEmptyRatings] No published measures found for new municipality ${e.name}`);const l=o.map(a=>({measure_id:a.id,catalog_version:"object"==typeof a.catalog_version?a.catalog_version.id:a.catalog_version,localteam_id:e.localteam_id,status:"draft",approved:!1,choices:a.choices_rating,rating:null}));await n.createMany(l,{emitEvents:!1}),i.info(`[createEmptyRatings] Created ${l.length} ratings_measures silently for municipality=${e.name}`)})(n,a))},u=async(e,a)=>{const t=await r(),s=new i.ItemsService("measures",{schema:t,accountability:c}),n=Array.isArray(e.keys)?e.keys[0]:e.keys,l=await s.readOne(n);if(!l||"published"!==l.status)return;await(async(e,{services:a,getSchema:t,logger:i})=>{const s=await t(),r=new a.ItemsService("municipalities",{schema:s,accountability:c}),n=new a.ItemsService("ratings_measures",{schema:s,accountability:c}),o=await r.readByQuery({limit:-1});if(!o?.length)return;const l=o.map(a=>({measure_id:e.id,catalog_version:"object"==typeof e.catalog_version?e.catalog_version.id:e.catalog_version,localteam_id:a.localteam_id,status:"draft",approved:!1,rating:null}));await n.createMany(l),i.info(`[createEmptyRatingsForMeasure] Created ${l.length} ratings for measure=${e.id}`)})(l,a);const u="object"==typeof l.catalog_version?l.catalog_version.id:l.catalog_version;await o({catalogVersionId:u},a)},m=async(e,a)=>{const t=await r(),s=new i.ItemsService("ratings_measures",{schema:t,accountability:c}),n=e.key??e.keys[0],l=await s.readOne(n,{fields:["localteam_id.municipality_id","measure_id.catalog_version"]}),u=l.localteam_id?.municipality_id,m="object"==typeof l.measure_id.catalog_version?l.measure_id.catalog_version.id:l.measure_id.catalog_version;u&&m&&(await o({municipalityIds:[u],catalogVersionId:m},a),await(async({catalogVersionId:e},{services:a,getSchema:t,logger:i})=>{const s=await t(),r=new a.ItemsService("municipality_scores",{schema:s,accountability:{admin:!0}}),n=await r.readByQuery({limit:-1,filter:{catalog_version:{_eq:e},municipality:{status:{_eq:"published"}}},fields:["id","score_total"]});if(!n?.length)return i.info(`[updateRanks] No scores found for catalogVersion=${e}`);const c=n.sort((e,a)=>(a.score_total??0)-(e.score_total??0)).map((e,a,t)=>({id:e.id,rank:0===a||e.score_total!==t[a-1].score_total?a+1:t[a-1].rank}));for(const e of c)await r.updateOne(e.id,{rank:e.rank});i.info(`[updateRanks] Updated ranks for ${c.length} municipality_scores`)})({catalogVersionId:m},a))},d=(e,a)=>async(t,c)=>{try{n.info(`[HOOK] entering ${e} — collection=${t.collection} key=${t.key} keys=${t.keys}`),n.info(`[HOOK] ctx keys: ${Object.keys(c||{}).join(", ")}`),n.info(`[HOOK] services available: ${Object.keys(i||{}).slice(0,20).join(", ")}`),t&&t.collection||n.warn(`[HOOK:${e}] meta missing or malformed: ${JSON.stringify(t)}`),await a(t,{services:i,getSchema:r,database:s,logger:n})}catch(a){throw n.error(`[HOOK:${e}] Caught error: ${a?.message}`),n.error(a?.stack??a),a}};a("items.create",d("items.create",async(e,a)=>{switch(e.collection){case"municipalities":return await l(e,a);case"measures":return await u(e,a);case"ratings_measures":return await m(e,a);default:return}})),a("items.update",d("items.update",async(e,a)=>{switch(e.collection){case"measures":return await u(e,a);case"ratings_measures":return await m(e,a);default:return}}))};
