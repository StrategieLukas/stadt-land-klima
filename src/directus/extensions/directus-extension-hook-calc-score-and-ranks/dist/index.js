"use strict";console.log("Extension loaded");var e=Object.freeze({__proto__:null,calculateScores:async function({municipalityIds:e=null,catalogVersionId:a},{services:i,getSchema:t,logger:s}){const c=await t(),r=new i.ItemsService("ratings_measures",{schema:c,accountability:{admin:!0}}),o=new i.ItemsService("measures",{schema:c,accountability:{admin:!0}}),n=new i.ItemsService("municipalities",{schema:c,accountability:{admin:!0}}),l=new i.ItemsService("municipality_scores",{schema:c,accountability:{admin:!0}});try{const i=await o.readByQuery({limit:-1,filter:{catalog_version:{_eq:a},status:{_eq:"published"}},fields:["id","sector","weight"]});if(!i?.length)return void s.info(`[calculateScores] No published measures for catalog ${a}.`);const t=new Map(i.map(e=>[e.id,e])),c=await n.readByQuery({limit:-1,...e?.length?{filter:{id:{_in:e}}}:{},fields:["id","localteam_id","name"]});if(!c?.length)return void s.info("[calculateScores] No municipalities to process.");s.info(`[calculateScores] Processing ${c.length} municipalities for catalog ${a}.`);for(const e of c){const c=e.localteam_id;if(!c)continue;const o=await r.readByQuery({limit:-1,filter:{localteam_id:{_eq:c},applicable:{_eq:!0},approved:{_eq:!0},measure_published:{_eq:!0},measure_id:{catalog_version:{_eq:a},status:{_eq:"published"}}},fields:["rating","measure_id"]});if(!o?.length){s.info(`[calculateScores] No candidate ratings for municipality "${e.name}".`);continue}const n={numerator_rated_sum:0,denominator_rated:0,denominator_all:0},m={};for(const e of i)m[e.sector]||(m[e.sector]={numerator_rated:0,denominator_rated:0});let u=0;for(const e of o){const a="object"==typeof e.measure_id?e.measure_id.id:e.measure_id,i=t.get(a);if(!i)continue;const s=i.weight??0;if(s<=0)continue;const c=i.sector??"total";n.denominator_all+=s;const r=e.rating,o=null!=r?parseFloat(r):NaN;Number.isNaN(o)||(n.numerator_rated_sum+=o*s,n.denominator_rated+=s,u+=s,m[c]||(m[c]={numerator_rated:0,denominator_rated:0}),m[c].numerator_rated+=o*s,m[c].denominator_rated+=s)}const d={};d.percentage_rated=n.denominator_all>0?u/n.denominator_all*100:0,n.denominator_rated>0?d.score_total=n.numerator_rated_sum/n.denominator_rated*100:d.score_total=0;for(const[e,a]of Object.entries(m)){const i=a.denominator_rated>0?a.numerator_rated/a.denominator_rated*100:0;d[`score_${e}`]=i}s.info({municipality:e.name,totals:n,sectors:m,scoresToPush:d},`[calculateScores] Completed scoring for "${e.name}".`);const[g]=await l.readByQuery({limit:1,filter:{municipality:{_eq:e.id},catalog_version:{_eq:a}},fields:["id"]});g?.id?(await l.updateOne(g.id,d),s.info(`[calculateScores] Updated municipality_scores for "${e.name}" (${g.id}).`)):s.warn(`[calculateScores] No municipality_scores record found for "${e.name}".`)}s.info(`[calculateScores] Completed calculations for catalog ${a}.`)}catch(e){throw s.error(e),e}}});module.exports=({action:a,filter:i},{services:t,database:s,getSchema:c,logger:r})=>{const o={admin:!0},n=async(a,i)=>{const{calculateScores:t}=await Promise.resolve().then(function(){return e});return await t(a,i)},l=async({catalogVersionId:e},{services:a,getSchema:i,logger:t})=>{const s=await i(),c=new a.ItemsService("municipality_scores",{schema:s,accountability:{admin:!0}}),r=await c.readByQuery({limit:-1,filter:{catalog_version:{_eq:e},municipality:{status:{_eq:"published"}}},fields:["id","score_total"]});if(!r?.length)return t.info(`[updateRanks] No published scores found for catalogVersion=${e}, thus not recalculating scores`);const o=r.sort((e,a)=>(a.score_total??0)-(e.score_total??0)).map((e,a,i)=>({id:e.id,rank:0===a||e.score_total!==i[a-1].score_total?a+1:i[a-1].rank}));for(const e of o)await c.updateOne(e.id,{rank:e.rank});t.info(`[updateRanks] Updated ranks for ${o.length} municipality_scores`)},m=async(e,a)=>{const i=await c(),s=new t.ItemsService("municipalities",{schema:i,accountability:o}),r=await s.readOne(e.key);r&&(await(async(e,{services:a,getSchema:i,logger:t})=>{const s=await i(),c=new a.ItemsService("measure_catalog",{schema:s,accountability:o}),r=new a.ItemsService("municipality_scores",{schema:s,accountability:o}),n=new a.ItemsService("municipalities",{schema:s,accountability:o}),l=(await c.readByQuery({limit:-1})).map(a=>({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0})),m=await r.createMany(l);await n.updateOne(e.id,{scores:m}),t.info(`[createEmptyScores] Created ${m.length} municipality_scores for ${e.name}`)})(r,a),await(async(e,{services:a,getSchema:i,logger:t})=>{const s=await i(),c=new a.ItemsService("measures",{schema:s,accountability:o}),r=new a.ItemsService("ratings_measures",{schema:s,accountability:o}),n=await c.readByQuery({limit:-1,filter:{status:{_eq:"published"}}});if(!n?.length)return void t.info(`[createEmptyRatings] No published measures found for new municipality ${e.name}`);const l=n.map(a=>({measure_id:a.id,catalog_version:"object"==typeof a.catalog_version?a.catalog_version.id:a.catalog_version,localteam_id:e.localteam_id,status:"draft",approved:!0,choices:a.choices_rating,rating:null}));await r.createMany(l,{emitEvents:!1}),t.info(`[createEmptyRatings] Created ${l.length} ratings_measures silently for municipality=${e.name}`)})(r,a))},u=async(e,a)=>{const i=await c(),s=new t.ItemsService("measures",{schema:i,accountability:o}),r=Array.isArray(e.keys)?e.keys[0]:e.keys,l=await s.readOne(r);if(!l||"published"!==l.status)return;await(async(e,{services:a,getSchema:i,logger:t})=>{const s=await i(),c=new a.ItemsService("municipalities",{schema:s,accountability:o}),r=new a.ItemsService("ratings_measures",{schema:s,accountability:o}),n=await c.readByQuery({limit:-1});if(!n?.length)return;const l=n.map(a=>({measure_id:e.id,catalog_version:"object"==typeof e.catalog_version?e.catalog_version.id:e.catalog_version,localteam_id:a.localteam_id,status:"draft",approved:!1,rating:null}));await r.createMany(l),t.info(`[createEmptyRatingsForMeasure] Created ${l.length} ratings for measure=${e.id}`)})(l,a);const m="object"==typeof l.catalog_version?l.catalog_version.id:l.catalog_version;await n({catalogVersionId:m},a)},d=async(e,a)=>{const i=await c(),s=new t.ItemsService("ratings_measures",{schema:i,accountability:o}),r=e.key??e.keys[0],m=await s.readOne(r,{fields:["localteam_id.municipality_id","measure_id.catalog_version"]}),u=m.localteam_id?.municipality_id,d="object"==typeof m.measure_id.catalog_version?m.measure_id.catalog_version.id:m.measure_id.catalog_version;u&&d&&(await n({municipalityIds:[u],catalogVersionId:d},a),await l({catalogVersionId:d},a))},g=(e,a)=>async(i,o)=>{try{r.info(`[HOOK] entering ${e} â€” collection=${i.collection} key=${i.key} keys=${i.keys}`),r.info(`[HOOK] ctx keys: ${Object.keys(o||{}).join(", ")}`),r.info(`[HOOK] services available: ${Object.keys(t||{}).slice(0,20).join(", ")}`),i&&i.collection||r.warn(`[HOOK:${e}] meta missing or malformed: ${JSON.stringify(i)}`),await a(i,{services:t,getSchema:c,database:s,logger:r})}catch(a){throw r.error(`[HOOK:${e}] Caught error: ${a?.message}`),r.error(a?.stack??a),a}};(async()=>{await(async({services:e,getSchema:a,logger:i})=>{const t=await a(),s=new e.ItemsService("municipalities",{schema:t,accountability:o}),c=new e.ItemsService("measure_catalog",{schema:t,accountability:o}),r=new e.ItemsService("municipality_scores",{schema:t,accountability:o});i.info("[syncAllMunicipalityScores] Fetching municipalities and catalog versions...");const m=await s.readByQuery({limit:-1}),u=await c.readByQuery({limit:-1});if(!m?.length||!u?.length)return void i.warn("[syncAllMunicipalityScores] No municipalities or catalog versions found.");const d=await r.readByQuery({limit:-1,fields:["id","municipality","catalog_version"]}),g=new Set(d.map(e=>`${e.municipality}:${e.catalog_version}`)),_=[];for(const e of m)for(const a of u){const i=`${e.id}:${a.id}`;g.has(i)||_.push({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0})}_.length?(i.info(`[syncAllMunicipalityScores] Creating ${_.length} missing municipality_scores...`),await r.createMany(_)):i.info("[syncAllMunicipalityScores] No missing municipality_scores found.");for(const t of u)i.info(`[syncAllMunicipalityScores] Calculating scores for catalog version ${t.id}...`),await n({catalogVersionId:t.id},{services:e,getSchema:a,logger:i}),i.info(`[syncAllMunicipalityScores] Updating ranks for catalog version ${t.id}...`),await l({catalogVersionId:t.id},{services:e,getSchema:a,logger:i});i.info("[syncAllMunicipalityScores] Sync completed.")})({services:t,getSchema:c,logger:r})})(),a("items.create",g("items.create",async(e,a)=>{switch(e.collection){case"municipalities":return await m(e,a);case"measures":return await u(e,a);case"ratings_measures":return await d(e,a);default:return}})),a("items.update",g("items.update",async(e,a)=>{switch(e.collection){case"measures":return await u(e,a);case"ratings_measures":return await d(e,a);default:return}}))};
