"use strict";console.log("Extension loaded");var e=Object.freeze({__proto__:null,calculateScores:async function({municipalityIds:e=null,catalogVersionId:a},{services:i,getSchema:t,logger:r}){r.info("Recalculating scores for "+(e?.length?e?.length:"all")+" municipalities");const s=await t(),n=new i.ItemsService("ratings_measures",{schema:s,accountability:{admin:!0}}),o=new i.ItemsService("measures",{schema:s,accountability:{admin:!0}}),c=new i.ItemsService("municipalities",{schema:s,accountability:{admin:!0}}),l=new i.ItemsService("municipality_scores",{schema:s,accountability:{admin:!0}});try{const i=await o.readByQuery({limit:-1,filter:{catalog_version:{_eq:a},status:{_eq:"published"}},fields:["id","sector","weight"]});if(!i?.length)return void r.info(`[calculateScores] No published measures for catalog ${a}.`);const t=new Map(i.map(e=>[e.id,e])),s=await c.readByQuery({limit:-1,...e?.length?{filter:{id:{_in:e}}}:{},fields:["id","localteam_id","name"]});if(!s?.length)return void r.info("[calculateScores] No municipalities to process.");r.info(`[calculateScores] Processing ${s.length} municipalities for catalog ${a}.`);for(const e of s){const s=e.localteam_id;if(!s)continue;const o=await n.readByQuery({limit:-1,filter:{localteam_id:{_eq:s},applicable:{_eq:!0},approved:{_eq:!0},measure_published:{_eq:!0},measure_id:{catalog_version:{_eq:a},status:{_eq:"published"}}},fields:["rating","measure_id"]});if(!o?.length){r.info(`[calculateScores] No candidate ratings for municipality "${e.name}".`);continue}const c={numerator_rated_sum:0,denominator_rated:0,denominator_all:0},u={};for(const e of i)u[e.sector]||(u[e.sector]={numerator_rated:0,denominator_rated:0});let m=0;for(const e of o){const a="object"==typeof e.measure_id?e.measure_id.id:e.measure_id,i=t.get(a);if(!i)continue;const r=i.weight??0;if(r<=0)continue;const s=i.sector??"total";c.denominator_all+=r;const n=e.rating,o=null!=n?parseFloat(n):NaN;Number.isNaN(o)||(c.numerator_rated_sum+=o*r,c.denominator_rated+=r,m+=r,u[s]||(u[s]={numerator_rated:0,denominator_rated:0}),u[s].numerator_rated+=o*r,u[s].denominator_rated+=r)}const d={};d.percentage_rated=c.denominator_all>0?m/c.denominator_all*100:0,c.denominator_rated>0?d.score_total=c.numerator_rated_sum/c.denominator_rated*100:d.score_total=0;for(const[e,a]of Object.entries(u)){const i=a.denominator_rated>0?a.numerator_rated/a.denominator_rated*100:0;d[`score_${e}`]=i}r.info({},`[calculateScores] Completed scoring for "${e.name}".`);const[g]=await l.readByQuery({limit:1,filter:{municipality:{_eq:e.id},catalog_version:{_eq:a}},fields:["id"]});g?.id?(await l.updateOne(g.id,d),r.info(`[calculateScores] Updated municipality_scores for "${e.name}" (${g.id}).`)):r.warn(`[calculateScores] No municipality_scores record found for "${e.name}".`)}r.info(`[calculateScores] Completed calculations for catalog ${a}.`)}catch(e){throw r.error(e),e}}});module.exports=({action:a,filter:i},{services:t,database:r,getSchema:s,logger:n})=>{const o={admin:!0},c=async(a,i)=>{const{calculateScores:t}=await Promise.resolve().then(function(){return e});return await t(a,i)},l=async({catalogVersionId:e},{services:a,getSchema:i,logger:t})=>{const r=await i(),s=new a.ItemsService("municipality_scores",{schema:r,accountability:{admin:!0}}),n=await s.readByQuery({limit:-1,filter:{catalog_version:{_eq:e},municipality:{status:{_eq:"published"}},percentage_rated:{_gt:95}},fields:["id","score_total"]});if(!n?.length)return t.info(`[updateRanks] No published scores found for catalogVersion=${e}, thus not recalculating scores`);const o=n.sort((e,a)=>(a.score_total??0)-(e.score_total??0)).map((e,a,i)=>({id:e.id,rank:0===a||e.score_total!==i[a-1].score_total?a+1:i[a-1].rank}));for(const e of o)await s.updateOne(e.id,{rank:e.rank});t.info(`[updateRanks] Updated ranks for ${o.length} municipality_scores`)},u=async(e,a)=>{const i=await s(),r=new t.ItemsService("municipalities",{schema:i,accountability:o}),n=await r.readOne(e.key);n&&(await(async(e,{services:a,getSchema:i,logger:t})=>{const r=await i(),s=new a.ItemsService("measure_catalog",{schema:r,accountability:o}),n=new a.ItemsService("municipality_scores",{schema:r,accountability:o}),c=new a.ItemsService("municipalities",{schema:r,accountability:o}),l=(await s.readByQuery({limit:-1})).map(a=>({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0})),u=await n.createMany(l);await c.updateOne(e.id,{scores:u}),t.info(`[createEmptyScores] Created ${u.length} municipality_scores for ${e.name}`)})(n,a),await(async(e,{services:a,getSchema:i,logger:t})=>{const r=await i(),s=new a.ItemsService("measures",{schema:r,accountability:o}),n=new a.ItemsService("ratings_measures",{schema:r,accountability:o}),c=await s.readByQuery({limit:-1,filter:{status:{_eq:"published"}}});if(!c?.length)return void t.info(`[createEmptyRatings] No published measures found for new municipality ${e.name}`);const l=c.map(a=>({measure_id:a.id,catalog_version:"object"==typeof a.catalog_version?a.catalog_version.id:a.catalog_version,localteam_id:e.localteam_id,status:"draft",approved:!0,choices:a.choices_rating,rating:null}));await n.createMany(l,{emitEvents:!1}),t.info(`[createEmptyRatings] Created ${l.length} ratings_measures silently for municipality=${e.name}`)})(n,a))},m=async(e,a)=>{n.info("handleMeasureCreatedOrPublished"),n.info(e.payload);const i="published"===e.payload.status;if(n.info("[DEBUG] Measure is being published in this change "+i),!i)return;const r=Array.isArray(e.keys)?e.keys[0]:e.key;n.info(`Measureid ${r}`);let u=e.payload.catalog_version,m=e.payload.choices_rating;if(n.info(`Catalog version from payload: ${u} / Rating choices from payload: ${m}`),!u||!m){n.info("Fetching measure as catalogVersion/ratingChoices are not in the update payload. This is normal for updates.");const e=await s(),a=new t.ItemsService("measures",{schema:e,accountability:o}),i=await a.readOne(r);if(!i||!i.catalog_version)return void n.error(`Unable to fetch newly created measure: ${r}`);u="object"==typeof i.catalog_version?i.catalog_version.id:i.catalog_version,m=i.choices_rating}n.info("Creating empty ratings for measure "+r+" and catalog_version "+u),await(async(e,a,i,{services:t,getSchema:r,logger:s})=>{s.info(`Creating empty ratings_measures for measure ${e}`);const n=await r(),c=new t.ItemsService("municipalities",{schema:n,accountability:o}),l=new t.ItemsService("ratings_measures",{schema:n,accountability:o}),u=await c.readByQuery({limit:-1});if(!u?.length)return;const m=u.map(t=>({measure_id:e,catalog_version:a,localteam_id:t.localteam_id,status:"draft",approved:!0,choices:i,rating:null}));await l.createMany(m,{emitEvents:!1}),s.info(`[createEmptyRatingsForNewMeasure] Created ${m.length} ratings for measure=${e} and catalogVersion=${a}`)})(r,u,m,a),await c({catalogVersionId:u},a),await l({catalogVersionId:u},a)},d=async(e,a)=>{const i=await s(),r=new t.ItemsService("ratings_measures",{schema:i,accountability:o}),n=e.key??e.keys[0],u=await r.readOne(n,{fields:["localteam_id.municipality_id","measure_id.catalog_version"]}),m=u.localteam_id?.municipality_id,d="object"==typeof u.measure_id.catalog_version?u.measure_id.catalog_version.id:u.measure_id.catalog_version;m&&d&&(await c({municipalityIds:[m],catalogVersionId:d},a),await l({catalogVersionId:d},a))},g=(e,a)=>async(i,o)=>{try{i&&i.collection||n.warn(`[HOOK:${e}] meta missing or malformed: ${JSON.stringify(i)}`),await a(i,{services:t,getSchema:s,database:r,logger:n})}catch(a){throw n.error(`[HOOK:${e}] Caught error: ${a?.message}`),n.error(a?.stack??a),a}};(async()=>{try{await(async({services:e,getSchema:a,logger:i})=>{const t=await a(),r=new e.ItemsService("municipalities",{schema:t,accountability:o}),s=new e.ItemsService("measure_catalog",{schema:t,accountability:o}),n=new e.ItemsService("municipality_scores",{schema:t,accountability:o});i.info("[syncAllMunicipalityScores] Checking if municipality_scores is empty...");const u=await n.readByQuery({limit:1,fields:["id"]});if(u&&u.length>0)return void i.info("[syncAllMunicipalityScores] municipality_scores already has entries. Skipping full sync.");i.info("[syncAllMunicipalityScores] municipality_scores is empty â€” performing initial sync.");const m=await r.readByQuery({limit:-1}),d=await s.readByQuery({limit:-1});if(!m?.length||!d?.length)return void i.warn("[syncAllMunicipalityScores] No municipalities or catalog versions found.");const g=[];for(const e of m)for(const a of d)g.push({municipality:e.id,catalog_version:a.id,score_total:0,percentage_rated:0,score_agriculture:0,score_buildings:0,score_management:0,score_energy:0,score_industry:0,score_transport:0});if(g.length){i.info(`[syncAllMunicipalityScores] Creating ${g.length} initial municipality_scores...`),await n.createMany(g);for(const t of d)i.info(`[syncAllMunicipalityScores] Calculating scores for catalog version ${t.id}...`),await c({catalogVersionId:t.id},{services:e,getSchema:a,logger:i}),i.info(`[syncAllMunicipalityScores] Updating ranks for catalog version ${t.id}...`),await l({catalogVersionId:t.id},{services:e,getSchema:a,logger:i});i.info("[syncAllMunicipalityScores] Initial sync completed successfully.")}else i.info("[syncAllMunicipalityScores] No entries to create (unexpected).")})({services:t,getSchema:s,logger:n})}catch(e){n.error(`[syncAllMunicipalityScores] Failed during startup: ${e.message}`),n.error(e.stack)}})(),a("items.create",g("items.create",async(e,a)=>{switch(e.collection){case"municipalities":return await u(e,a);case"measures":return await m(e,a);case"ratings_measures":return await d(e,a);default:return}})),a("items.update",g("items.update",async(e,a)=>{switch(e.collection){case"measures":return await m(e,a);case"ratings_measures":return await d(e,a);default:return}}))};

